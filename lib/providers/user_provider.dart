import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import '../models/user_model.dart';
import '../services/auth_service.dart';

class UserProvider with ChangeNotifier {
  UserModel? _user;
  bool _isLoading = true;
  String? _error;
  final AuthService _authService = AuthService();

  UserModel? get user => _user;
  bool get isLoading => _isLoading;
  String? get error => _error;
  bool get isLoggedIn => _user != null;

  // INITIALISATION AVEC V√âRIFICATION RENFORC√âE
  Future<void> initialize() async {
    try {
      _setLoading(true);
      _clearError();
      
      print('üîç UserProvider - V√©rification de l\'utilisateur actuel...');
      
      // V√©rifier d'abord l'√©tat Firebase
      final auth = FirebaseAuth.instance;
      final firebaseUser = auth.currentUser;
      
      if (firebaseUser != null) {
        print('üë§ Firebase user trouv√©: ${firebaseUser.uid}');
        
        // R√©cup√©rer les donn√©es fra√Æches depuis Firestore
        UserModel? currentUser = await _authService.getCurrentUser();
        
        if (currentUser != null) {
          print('‚úÖ Utilisateur valide: ${currentUser.email} - R√¥le: ${currentUser.role}');
          _user = currentUser;
          _clearError();
        } else {
          print('‚ùå Utilisateur Firebase mais pas de donn√©es Firestore');
          _user = null;
          _setError('Donn√©es utilisateur non trouv√©es');
        }
      } else {
        print('üîí Aucun utilisateur Firebase connect√©');
        _user = null;
      }
    } catch (e) {
      print('‚ùå Erreur lors de l\'initialisation UserProvider: $e');
      _setError('Erreur lors du chargement de l\'utilisateur');
      _user = null;
    } finally {
      _setLoading(false);
    }
  }

  // D√âCONNEXION COMPL√àTE
  Future<void> signOut() async {
    try {
      _setLoading(true);
      
      print('üö™ UserProvider - D√©connexion en cours...');
      await _authService.signOut();
      
      _user = null;
      _clearError();
      
      print('‚úÖ UserProvider - D√©connexion r√©ussie');
      
    } catch (e) {
      print('‚ùå UserProvider - Erreur lors de la d√©connexion: $e');
      _setError('Erreur lors de la d√©connexion');
      rethrow;
    } finally {
      _setLoading(false);
    }
  }

  // CONNEXION
  Future<void> signIn(String email, String password) async {
    try {
      _setLoading(true);
      _clearError();
      
      print('üîê UserProvider - Tentative de connexion: $email');
      
      UserModel? user = await _authService.signIn(email, password);
      
      if (user != null) {
        print('‚úÖ UserProvider - Connexion r√©ussie: ${user.email} - R√¥le: ${user.role}');
        _user = user;
        _clearError();
      } else {
        throw Exception('√âchec de la connexion');
      }
    } catch (e) {
      print('‚ùå UserProvider - Erreur de connexion: $e');
      _setError(e.toString().replaceAll('Exception: ', ''));
      _user = null;
      rethrow;
    } finally {
      _setLoading(false);
    }
  }

  // INSCRIPTION ENSEIGNANT
  Future<void> signUpTeacher({
    required String email,
    required String password,
    required String firstName,
    required String lastName,
    required String schoolName,
    required String className,
  }) async {
    try {
      _setLoading(true);
      _clearError();
      
      print('üë®‚Äçüè´ UserProvider - Inscription enseignant: $email');
      
      UserModel user = await _authService.signUpTeacher(
        email: email,
        password: password,
        firstName: firstName,
        lastName: lastName,
        schoolName: schoolName,
        className: className,
      );
      
      print('‚úÖ UserProvider - Inscription r√©ussie: ${user.email}');
      _user = user;
      _clearError();
      
    } catch (e) {
      print('‚ùå UserProvider - Erreur inscription: $e');
      _setError(e.toString().replaceAll('Exception: ', ''));
      rethrow;
    } finally {
      _setLoading(false);
    }
  }

  // INSCRIPTION PARENT - ADAPT√âE POUR STUDENTCODE
  Future<void> signUpParent({
    required String email,
    required String password,
    required String firstName,
    required String lastName,
    required String studentCode, // ‚Üê CHANGEMENT : studentCode au lieu de studentId
  }) async {
    try {
      _setLoading(true);
      _clearError();
      
      print('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ UserProvider - Inscription parent: $email');
      print('üîë Code √©l√®ve utilis√©: $studentCode');
      
      UserModel user = await _authService.signUpParent(
        email: email,
        password: password,
        firstName: firstName,
        lastName: lastName,
        studentCode: studentCode, // ‚Üê CHANGEMENT
      );
      
      print('‚úÖ UserProvider - Inscription parent r√©ussie: ${user.email}');
      _user = user;
      _clearError();
      
    } catch (e) {
      print('‚ùå UserProvider - Erreur inscription parent: $e');
      _setError(e.toString().replaceAll('Exception: ', ''));
      rethrow;
    } finally {
      _setLoading(false);
    }
  }

  // RAFRA√éCHISSEMENT DES DONN√âES UTILISATEUR
  Future<void> refreshUserData() async {
    try {
      print('üîÑ UserProvider - Rafra√Æchissement des donn√©es utilisateur...');
      
      final updatedUser = await _authService.getCurrentUser();
      if (updatedUser != null) {
        _user = updatedUser;
        _clearError();
        print('‚úÖ Donn√©es utilisateur rafra√Æchies: ${_user?.email} - Classes: ${_user?.classIds}');
      } else {
        print('‚ö†Ô∏è Aucun utilisateur trouv√© lors du rafra√Æchissement');
        _user = null;
      }
      notifyListeners();
    } catch (e) {
      print('‚ùå Erreur rafra√Æchissement donn√©es: $e');
      _setError('Erreur lors du rafra√Æchissement des donn√©es');
    }
  }

  // M√âTHODES POUR MODIFIER L'√âTAT DIRECTEMENT
  void setUser(UserModel user) {
    print('üë§ UserProvider - Set user: ${user.email} - R√¥le: ${user.role}');
    _user = user;
    _clearError();
    _setLoading(false);
  }

  void setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void setError(String error) {
    _error = error;
    _isLoading = false;
    notifyListeners();
  }

  void clearError() {
    _error = null;
    notifyListeners();
  }

  void clearUser() {
    _user = null;
    _clearError();
    _setLoading(false);
  }

  // M√âTHODES PRIV√âES POUR G√âRER L'√âTAT INTERNE
  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setError(String error) {
    _error = error;
    notifyListeners();
  }

  void _clearError() {
    _error = null;
  }

  // V√âRIFICATION DE LA VALIDIT√â DE LA SESSION
  Future<bool> checkSessionValidity() async {
    try {
      final firebaseUser = FirebaseAuth.instance.currentUser;
      if (firebaseUser == null) {
        print('üîí Aucune session Firebase active');
        return false;
      }

      // V√©rifier que l'utilisateur Firebase correspond √† l'utilisateur dans le provider
      if (_user == null || _user!.uid != firebaseUser.uid) {
        print('üîÑ Session non synchronis√©e, rechargement des donn√©es...');
        await refreshUserData();
      }

      return _user != null;
    } catch (e) {
      print('‚ùå Erreur v√©rification session: $e');
      return false;
    }
  }

  // R√âINITIALISATION COMPL√àTE
  void reset() {
    _user = null;
    _isLoading = false;
    _error = null;
    notifyListeners();
    print('üîÑ UserProvider - √âtat r√©initialis√©');
  }

  // MISE √Ä JOUR DU PROFIL UTILISATEUR
  Future<void> updateProfile({
    String? firstName,
    String? lastName,
    String? profileImageUrl,
  }) async {
    try {
      if (_user == null) {
        throw Exception('Aucun utilisateur connect√©');
      }

      _setLoading(true);
      
      // Mettre √† jour les donn√©es localement d'abord
      final updatedUser = UserModel(
        uid: _user!.uid,
        email: _user!.email,
        firstName: firstName ?? _user!.firstName,
        lastName: lastName ?? _user!.lastName,
        role: _user!.role,
        classIds: _user!.classIds,
        profileImageUrl: profileImageUrl ?? _user!.profileImageUrl,
        createdAt: _user!.createdAt,
      );

      _user = updatedUser;
      _clearError();
      
      print('‚úÖ Profil utilisateur mis √† jour localement');
      
    } catch (e) {
      print('‚ùå Erreur mise √† jour profil: $e');
      _setError('Erreur lors de la mise √† jour du profil');
      rethrow;
    } finally {
      _setLoading(false);
    }
  }

  // AJOUT D'UNE CLASSE (POUR ENSEIGNANTS)
  void addClass(String classId) {
    if (_user != null && _user!.role == 'teacher') {
      final updatedClassIds = List<String>.from(_user!.classIds)..add(classId);
      
      _user = UserModel(
        uid: _user!.uid,
        email: _user!.email,
        firstName: _user!.firstName,
        lastName: _user!.lastName,
        role: _user!.role,
        classIds: updatedClassIds,
        profileImageUrl: _user!.profileImageUrl,
        createdAt: _user!.createdAt,
      );
      
      notifyListeners();
      print('‚úÖ Classe ajout√©e: $classId - Total: ${updatedClassIds.length}');
    }
  }

  // SUPPRESSION D'UNE CLASSE (POUR ENSEIGNANTS)
  void removeClass(String classId) {
    if (_user != null && _user!.role == 'teacher') {
      final updatedClassIds = List<String>.from(_user!.classIds)..remove(classId);
      
      _user = UserModel(
        uid: _user!.uid,
        email: _user!.email,
        firstName: _user!.firstName,
        lastName: _user!.lastName,
        role: _user!.role,
        classIds: updatedClassIds,
        profileImageUrl: _user!.profileImageUrl,
        createdAt: _user!.createdAt,
      );
      
      notifyListeners();
      print('‚úÖ Classe supprim√©e: $classId - Restantes: ${updatedClassIds.length}');
    }
  }

  // V√âRIFICATION DES PERMISSIONS
  bool canManageClass(String classId) {
    if (_user == null) return false;
    
    if (_user!.role == 'teacher') {
      return _user!.classIds.contains(classId);
    }
    
    return false;
  }

  bool canViewClass(String classId) {
    if (_user == null) return false;
    
    if (_user!.role == 'teacher') {
      return _user!.classIds.contains(classId);
    } else if (_user!.role == 'parent') {
      // Pour les parents, on v√©rifie via les donn√©es de l'√©l√®ve
      // Cette logique sera impl√©ment√©e dans le ParentHome
      return true;
    }
    
    return false;
  }

  // STATUT CONNEXION D√âTAILL√â
  Map<String, dynamic> get connectionStatus {
    return {
      'isLoggedIn': isLoggedIn,
      'userEmail': _user?.email,
      'userRole': _user?.role,
      'hasClasses': _user?.classIds.isNotEmpty ?? false,
      'classCount': _user?.classIds.length ?? 0,
      'isLoading': _isLoading,
      'hasError': _error != null,
    };
  }

  // LOGS D√âTAILL√âS (pour le d√©bogage)
  void printDebugInfo() {
    print('''
üß© UserProvider - √âtat actuel:
‚îú‚îÄ‚îÄ Utilisateur: ${_user?.email ?? 'Aucun'}
‚îú‚îÄ‚îÄ R√¥le: ${_user?.role ?? 'N/A'}
‚îú‚îÄ‚îÄ Classes: ${_user?.classIds ?? []}
‚îú‚îÄ‚îÄ Chargement: $_isLoading
‚îú‚îÄ‚îÄ Erreur: $_error
‚îî‚îÄ‚îÄ Connect√©: $isLoggedIn
    ''');
  }
}