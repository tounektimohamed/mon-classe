import 'package:flutter/material.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:open_filex/open_filex.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'dart:io';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:universal_html/html.dart' as html;

class FileService {
  final FirebaseStorage _storage = FirebaseStorage.instance;

  // T√©l√©charger et ouvrir un fichier
  Future<void> downloadAndOpenFile(String fileUrl, String fileName) async {
    try {
      if (kIsWeb) {
        // Impl√©mentation pour le web
        await _downloadFileWeb(fileUrl, fileName);
      } else {
        // Impl√©mentation pour mobile/desktop
        await _downloadFileMobile(fileUrl, fileName);
      }
    } catch (e) {
      print('‚ùå Erreur dans downloadAndOpenFile: $e');
      rethrow;
    }
  }

  // Impl√©mentation pour le web - CORRIG√âE
  Future<void> _downloadFileWeb(String fileUrl, String fileName) async {
    try {
      print('üåê D√©but du t√©l√©chargement web: $fileName');
      print('üìÅ URL: $fileUrl');

      // M√©thode 1: Utiliser directement l'URL Firebase Storage
      await _downloadViaAnchor(fileUrl, fileName);
      
    } catch (e) {
      print('‚ùå Erreur t√©l√©chargement web: $e');
      // Essayer une m√©thode alternative
      await _downloadViaHttpRequest(fileUrl, fileName);
    }
  }

  // M√©thode 1: T√©l√©chargement direct via anchor element
  Future<void> _downloadViaAnchor(String fileUrl, String fileName) async {
    try {
      // Cr√©er un √©l√©ment anchor pour le t√©l√©chargement
      final anchor = html.AnchorElement(href: fileUrl)
        ..target = '_blank'
        ..download = fileName
        ..style.display = 'none';

      html.document.body?.children.add(anchor);
      anchor.click();
      html.document.body?.children.remove(anchor);
      
      print('‚úÖ T√©l√©chargement via anchor r√©ussi: $fileName');
    } catch (e) {
      print('‚ùå Erreur avec anchor: $e');
      rethrow;
    }
  }

  // M√©thode 2: T√©l√©chargement via HTTP request (alternative)
  Future<void> _downloadViaHttpRequest(String fileUrl, String fileName) async {
    try {
      print('üîÑ Tentative de t√©l√©chargement via HTTP request...');
      
      // Cr√©er une requ√™te HTTP
      final response = await html.HttpRequest.request(
        fileUrl,
        method: 'GET',
        responseType: 'blob',
      );

      if (response.status == 200) {
        final blob = response.response as html.Blob;
        final url = html.Url.createObjectUrl(blob);
        
        final anchor = html.AnchorElement(href: url)
          ..download = fileName
          ..style.display = 'none';
        
        html.document.body?.children.add(anchor);
        anchor.click();
        html.document.body?.children.remove(anchor);
        html.Url.revokeObjectUrl(url);
        
        print('‚úÖ T√©l√©chargement via HTTP r√©ussi: $fileName');
      } else {
        throw Exception('Erreur HTTP: ${response.status}');
      }
    } catch (e) {
      print('‚ùå Erreur avec HTTP request: $e');
      
      // M√©thode 3: Ouvrir dans un nouvel onglet
      await _openInNewTab(fileUrl);
    }
  }

  // M√©thode 3: Ouvrir dans un nouvel onglet
  Future<void> _openInNewTab(String fileUrl) async {
    try {
      html.window.open(fileUrl, '_blank');
      print('‚úÖ Fichier ouvert dans un nouvel onglet');
    } catch (e) {
      print('‚ùå Erreur avec ouverture nouvel onglet: $e');
      throw Exception('Impossible de t√©l√©charger ou d\'ouvrir le fichier');
    }
  }

  // Impl√©mentation pour mobile/desktop
  Future<void> _downloadFileMobile(String fileUrl, String fileName) async {
    try {
      // V√©rifier les permissions de stockage
      if (await _requestStoragePermission()) {
        await _downloadAndOpenMobile(fileUrl, fileName);
      } else {
        throw Exception('Permission de stockage refus√©e');
      }
    } catch (e) {
      rethrow;
    }
  }

  Future<bool> _requestStoragePermission() async {
    if (Platform.isAndroid) {
      final status = await Permission.storage.request();
      return status.isGranted;
    }
    return true; // Sur iOS, les permissions sont g√©r√©es diff√©remment
  }

  Future<void> _downloadAndOpenMobile(String fileUrl, String fileName) async {
    try {
      // Obtenir le r√©pertoire de t√©l√©chargement
      final Directory tempDir = await getTemporaryDirectory();
      final String filePath = '${tempDir.path}/$fileName';

      // T√©l√©charger le fichier depuis Firebase Storage
      final Reference ref = _storage.refFromURL(fileUrl);
      final File file = File(filePath);
      
      // T√©l√©charger le fichier
      await ref.writeToFile(file);
      
      print('‚úÖ Fichier t√©l√©charg√©: $filePath');

      // Ouvrir le fichier
      final result = await OpenFilex.open(filePath);
      
      print('üìÅ R√©sultat ouverture: ${result.message}');
      
      if (result.type != ResultType.done) {
        throw Exception('Impossible d\'ouvrir le fichier: ${result.message}');
      }
      
    } catch (e) {
      print('‚ùå Erreur t√©l√©chargement/ouverture mobile: $e');
      rethrow;
    }
  }

  // Obtenir le type de fichier pour l'ic√¥ne
  static FileType getFileType(String fileName) {
    final extension = fileName.split('.').last.toLowerCase();
    
    switch (extension) {
      case 'pdf':
        return FileType.pdf;
      case 'jpg':
      case 'jpeg':
      case 'png':
      case 'gif':
      case 'bmp':
        return FileType.image;
      case 'doc':
      case 'docx':
        return FileType.word;
      case 'xls':
      case 'xlsx':
        return FileType.excel;
      case 'ppt':
      case 'pptx':
        return FileType.powerpoint;
      case 'txt':
        return FileType.text;
      case 'zip':
      case 'rar':
        return FileType.archive;
      default:
        return FileType.unknown;
    }
  }

  // Obtenir l'ic√¥ne correspondante
  static IconData getFileIcon(FileType fileType) {
    switch (fileType) {
      case FileType.pdf:
        return Icons.picture_as_pdf;
      case FileType.image:
        return Icons.image;
      case FileType.word:
        return Icons.description;
      case FileType.excel:
        return Icons.table_chart;
      case FileType.powerpoint:
        return Icons.slideshow;
      case FileType.text:
        return Icons.text_fields;
      case FileType.archive:
        return Icons.folder_zip;
      case FileType.unknown:
        return Icons.insert_drive_file;
    }
  }

  // Obtenir la couleur correspondante
  static Color getFileColor(FileType fileType) {
    switch (fileType) {
      case FileType.pdf:
        return Colors.red;
      case FileType.image:
        return Colors.green;
      case FileType.word:
        return Colors.blue;
      case FileType.excel:
        return Colors.green;
      case FileType.powerpoint:
        return Colors.orange;
      case FileType.text:
        return Colors.blueGrey;
      case FileType.archive:
        return Colors.amber;
      case FileType.unknown:
        return Colors.grey;
    }
  }
}

enum FileType {
  pdf,
  image,
  word,
  excel,
  powerpoint,
  text,
  archive,
  unknown,
}