import 'package:flutter/material.dart';
import '../models/user_model.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Stream<User?> get authStateChanges => _auth.authStateChanges();

  // FORCER LA D√âCONNEXION COMPL√àTE
  Future<void> forceSignOut() async {
    try {
      print('üö™ D√©connexion forc√©e en cours...');
      
      // M√©thode agressive pour garantir la d√©connexion
      await _auth.signOut();
      
      // Attendre que Firebase traite la d√©connexion
      await Future.delayed(const Duration(milliseconds: 800));
      
      // V√©rifier que la d√©connexion est effective
      if (_auth.currentUser != null) {
        print('‚ö†Ô∏è User toujours connect√©, nouvelle tentative...');
        await _auth.signOut();
        await Future.delayed(const Duration(milliseconds: 300));
      }
      
      print('‚úÖ D√©connexion forc√©e r√©ussie');
    } catch (e) {
      print('‚ùå Erreur forceSignOut: $e');
      rethrow;
    }
  }

  // CONNEXION AVEC NETTOYAGE COMPLET
  Future<UserModel?> signIn(String email, String password) async {
    try {
      print('üîê Tentative de connexion: $email');

      // S'assurer d'√™tre d√©connect√© avant de se connecter
      if (_auth.currentUser != null) {
        print('üîÑ Nettoyage de la session pr√©c√©dente...');
        await forceSignOut();
        await Future.delayed(const Duration(milliseconds: 500));
      }

      // Configurer la persistance
      await _auth.setPersistence(Persistence.LOCAL);
      
      UserCredential result = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );
      
      // Attendre que l'authentification soit compl√®te
      await Future.delayed(const Duration(milliseconds: 500));
      
      // Recharger l'utilisateur pour s'assurer des donn√©es fra√Æches
      await result.user?.reload();
      User? freshUser = _auth.currentUser;
      
      if (freshUser == null) {
        throw Exception('√âchec de la connexion');
      }

      print('‚úÖ Firebase auth r√©ussie, r√©cup√©ration des donn√©es Firestore...');

      // R√©cup√©rer les donn√©es utilisateur depuis Firestore
      DocumentSnapshot userDoc = await _firestore
          .collection('users')
          .doc(freshUser.uid)
          .get();
      
      if (userDoc.exists) {
        final userData = userDoc.data() as Map<String, dynamic>;
        final userModel = UserModel.fromMap(userData);
        print('‚úÖ Utilisateur connect√©: ${userModel.email} - R√¥le: ${userModel.role}');
        return userModel;
      }
      
      throw Exception('Profil utilisateur non trouv√©');
      
    } on FirebaseAuthException catch (e) {
      print('‚ùå FirebaseAuthException: ${e.code}');
      throw Exception(_getAuthErrorMessage(e.code));
    } catch (e) {
      print('‚ùå Erreur de connexion: $e');
      throw Exception('Erreur de connexion: $e');
    }
  }

  // INSCRIPTION ENSEIGNANT
  Future<UserModel> signUpTeacher({
    required String email,
    required String password,
    required String firstName,
    required String lastName,
    required String schoolName,
  }) async {
    try {
      print('üë®‚Äçüè´ Inscription enseignant: $email');

      // V√©rifier d'abord si l'email existe d√©j√†
      try {
        await _auth.signInWithEmailAndPassword(
          email: email,
          password: 'temporary_password',
        );
        throw Exception('Un compte avec cet email existe d√©j√†.');
      } on FirebaseAuthException catch (e) {
        if (e.code == 'user-not-found') {
          // Email disponible, continuer
        } else if (e.code == 'wrong-password') {
          throw Exception('Un compte avec cet email existe d√©j√†.');
        } else {
          throw Exception(_getAuthErrorMessage(e.code));
        }
      }

      // Configurer la persistance
      await _auth.setPersistence(Persistence.LOCAL);

      UserCredential result = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );

      // Cr√©er une nouvelle classe
      DocumentReference classRef = await _firestore.collection('classes').add({
        'name': 'Classe de $firstName $lastName',
        'schoolName': schoolName,
        'teacherId': result.user!.uid,
        'createdAt': DateTime.now().millisecondsSinceEpoch,
      });

      // Cr√©er le profil enseignant
      UserModel teacher = UserModel(
        uid: result.user!.uid,
        email: email,
        firstName: firstName,
        lastName: lastName,
        role: 'teacher',
        classId: classRef.id,
        createdAt: DateTime.now(),
      );

      await _firestore
          .collection('users')
          .doc(result.user!.uid)
          .set(teacher.toMap());

      print('‚úÖ Enseignant inscrit: ${teacher.email}');
      return teacher;
    } on FirebaseAuthException catch (e) {
      if (e.code == 'email-already-in-use') {
        throw Exception('Un compte avec cet email existe d√©j√†.');
      }
      throw Exception(_getAuthErrorMessage(e.code));
    } catch (e) {
      throw Exception('Erreur d\'inscription enseignant: $e');
    }
  }

  // INSCRIPTION PARENT
  Future<UserModel> signUpParent({
    required String email,
    required String password,
    required String firstName,
    required String lastName,
    required String studentId,
  }) async {
    try {
      print('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Inscription parent: $email');

      // V√©rifier d'abord si l'email existe d√©j√†
      try {
        await _auth.signInWithEmailAndPassword(
          email: email,
          password: 'temporary_password',
        );
        throw Exception('Un compte avec cet email existe d√©j√†.');
      } on FirebaseAuthException catch (e) {
        if (e.code == 'user-not-found') {
          // Email disponible, continuer
        } else if (e.code == 'wrong-password') {
          throw Exception('Un compte avec cet email existe d√©j√†.');
        } else {
          throw Exception(_getAuthErrorMessage(e.code));
        }
      }

      // V√©rifier si l'√©l√®ve existe
      DocumentSnapshot studentDoc = await _firestore
          .collection('students')
          .doc(studentId)
          .get();

      if (!studentDoc.exists) {
        throw Exception('Code √©l√®ve invalide. V√©rifiez le code et r√©essayez.');
      }

      // V√©rifier si l'√©l√®ve a d√©j√† un parent
      final studentData = studentDoc.data() as Map<String, dynamic>?;
      if (studentData != null && studentData['parentId'] != null) {
        throw Exception('Cet √©l√®ve est d√©j√† associ√© √† un compte parent.');
      }

      // Configurer la persistance
      await _auth.setPersistence(Persistence.LOCAL);

      // Cr√©er le compte utilisateur
      UserCredential result = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );

      // Lier le parent √† l'√©l√®ve
      await _firestore
          .collection('students')
          .doc(studentId)
          .update({
            'parentId': result.user!.uid,
            'updatedAt': DateTime.now().millisecondsSinceEpoch,
          });

      // Cr√©er le profil parent
      UserModel parent = UserModel(
        uid: result.user!.uid,
        email: email,
        firstName: firstName,
        lastName: lastName,
        role: 'parent',
        createdAt: DateTime.now(),
      );

      await _firestore
          .collection('users')
          .doc(result.user!.uid)
          .set(parent.toMap());

      print('‚úÖ Parent inscrit: ${parent.email}');
      return parent;
    } on FirebaseAuthException catch (e) {
      if (e.code == 'email-already-in-use') {
        throw Exception('Un compte avec cet email existe d√©j√†.');
      }
      throw Exception(_getAuthErrorMessage(e.code));
    } catch (e) {
      throw Exception('Erreur d\'inscription parent: $e');
    }
  }

  // D√âCONNEXION
  Future<void> signOut() async {
    try {
      await forceSignOut();
    } catch (e) {
      throw Exception('Erreur de d√©connexion: $e');
    }
  }

  // V√âRIFIER L'UTILISATEUR ACTUEL AVEC DONN√âES FRA√éCHES
  Future<UserModel?> getCurrentUser() async {
    try {
      User? firebaseUser = _auth.currentUser;
      
      if (firebaseUser != null) {
        print('üîç V√©rification utilisateur actuel: ${firebaseUser.uid}');
        
        // Recharger pour s'assurer des donn√©es √† jour
        await firebaseUser.reload();
        firebaseUser = _auth.currentUser;
        
        if (firebaseUser != null) {
          DocumentSnapshot userDoc = await _firestore
              .collection('users')
              .doc(firebaseUser.uid)
              .get();
          
          if (userDoc.exists) {
            final userData = userDoc.data() as Map<String, dynamic>;
            final userModel = UserModel.fromMap(userData);
            print('‚úÖ Utilisateur actuel: ${userModel.email} - R√¥le: ${userModel.role}');
            return userModel;
          } else {
            print('‚ùå Donn√©es Firestore non trouv√©es pour l\'utilisateur');
          }
        }
      } else {
        print('üîí Aucun utilisateur Firebase connect√©');
      }
      return null;
    } catch (e) {
      print('‚ùå Erreur getCurrentUser: $e');
      return null;
    }
  }

  // R√âCUP√âRER L'UTILISATEUR PAR UID
  Future<UserModel?> getUserById(String uid) async {
    try {
      DocumentSnapshot userDoc = await _firestore
          .collection('users')
          .doc(uid)
          .get();
      
      if (userDoc.exists) {
        return UserModel.fromMap(userDoc.data() as Map<String, dynamic>);
      }
      return null;
    } catch (e) {
      print('‚ùå Erreur getUserById: $e');
      return null;
    }
  }

  // MESSAGES D'ERREUR D'AUTHENTIFICATION
  String _getAuthErrorMessage(String errorCode) {
    switch (errorCode) {
      case 'weak-password':
        return 'Le mot de passe est trop faible (minimum 6 caract√®res).';
      case 'email-already-in-use':
        return 'Un compte avec cet email existe d√©j√†.';
      case 'invalid-email':
        return 'L\'adresse email est invalide.';
      case 'user-not-found':
        return 'Aucun compte trouv√© avec cet email.';
      case 'wrong-password':
        return 'Mot de passe incorrect.';
      case 'network-request-failed':
        return 'Erreur de connexion internet. V√©rifiez votre connexion.';
      case 'too-many-requests':
        return 'Trop de tentatives. R√©essayez plus tard.';
      case 'operation-not-allowed':
        return 'L\'authentification par email/mot de passe n\'est pas activ√©e. Contactez l\'administrateur.';
      default:
        return 'Une erreur est survenue: $errorCode';
    }
  }
}